import 'package:appwrite/appwrite.dart';
import 'package:chatview/chatview.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:programming_sns/apis/message_api.dart';
import 'package:programming_sns/extensions/extensions.dart';
import 'package:programming_sns/features/chat/providers/chat_message_event.dart';
import 'package:programming_sns/features/chat/providers/chat_message_provider.dart';
import 'package:programming_sns/features/chat/widgets/chat_card.dart';
import 'package:programming_sns/features/theme/theme_color.dart';
import 'package:programming_sns/features/user/providers/user_model_provider.dart';
import 'package:programming_sns/features/user/models/user_model.dart';
import 'package:programming_sns/temp/data2.dart';
import 'package:programming_sns/temp/theme.dart';
import 'package:intl/date_symbol_data_local.dart';

class ChatScreen extends ConsumerStatefulWidget {
  final String label;
  final String chatRoomId;
  const ChatScreen({
    super.key,
    required this.label,
    required this.chatRoomId,
  });

  static const String path = 'chatScreen';

  @override
  ConsumerState<ConsumerStatefulWidget> createState() => _ChatScreenState();
}

class _ChatScreenState extends ConsumerState<ChatScreen> {
  AppTheme theme = LightTheme();
  bool isDarkTheme = false;

  bool showReaction = true;

  bool isCurrentScreen = true;

  String? userId;

  final ChatController chatController = ChatController(
    initialMessageList: [],
    scrollController: ScrollController(),
    chatUsers: [],
  );

  // @override
  // void initState() {
  //   super.initState();

  //   chatController = ChatController(
  //     initialMessageList: [],
  //     scrollController: ScrollController(
  //         // onDetach: (position) async {

  //         //   if (isCurrentScreen) {
  //         //     await ref.read(chatMessageUserListProvider(widget.chatRoomId).notifier).addMessages();
  //         //     chatController.scrollController.attach(position);
  //         //   }
  //         // },
  //         ),
  //     chatUsers: [],
  //   );

  // chatController.scrollController.addListener(() async {
  //   final position = chatController.scrollController.position;
  //   final maxScrollLimit = position.maxScrollExtent;
  //   final currentPosition = position.pixels;
  //   final minScrollLimit = position.minScrollExtent;
  //   print('currentPosition:$currentPosition');
  //   print('maxScrollLimit:$maxScrollLimit');
  //   print('minScrollLimit:$minScrollLimit');
  //   if (currentPosition == maxScrollLimit) {
  //     print('MAX');
  //     await ref.read(chatMessageUserListProvider(widget.chatRoomId).notifier).addMessages();
  //     // chatController.scrollController.detach(position);
  //   }
  //   if (currentPosition == minScrollLimit) {
  //     print('MIN');
  //     // chatController.scrollController.detach(position);
  //   }
  // });
  // }

  // @override
  // void didChangeDependencies() {
  //   super.didChangeDependencies();
  //   // ウィジェットの依存関係に変更があった時、or initState()の直後にdidChangeDependenciesが呼ばれる。
  //   // つまり、ScrollControllerのonDetach（ウィジェットの依存関係に変更）を検知した時、
  //   // didChangeDependenciesが呼ばれるため、didChangeDependenciesで書く必要がある。
  //   // isCurrentScreen = ModalRoute.of(context)!.isCurrent;
  // }

  @override
  Widget build(BuildContext context) {
    initializeDateFormatting("ja");

    return Scaffold(
        appBar: AppBar(title: Text(widget.label)),

        /// USER
        body: ref.watchEX(
          userModelProvider,
          complete: (currentUserModel) {
            userId ??= currentUserModel.id;
            final ChatUser currentChatUser = UserModel.toChatUser(currentUserModel);

            /// CHAT
            return ref.watchEX(
              // chatControllerProvider(widget.chatRoomId),
              chatMessageUserListProvider(widget.chatRoomId),
              loading: const SizedBox(width: 0, height: 0),
              complete: (chatList) {
                chatController.initialMessageList = chatList.$1;
                // .take(50).toList();

                final createdAt = chatController.initialMessageList.first.createdAt;
                print('日付$createdAt');
                // .reversed.toList();
                chatController.chatUsers = chatList.$2;

                /// EVENT
                ref.watch(chatMessageEventProvider(widget.chatRoomId));

                return ChatView(
                  currentUser: currentChatUser,
                  chatController: chatController,
                  onSendTap: onSendTap,
                  featureActiveConfig: const FeatureActiveConfig(
                    enableSwipeToReply: !kIsWeb, // TODO
                    enableSwipeToSeeTime: false,
                    enablePagination: true, // ページネーション
                  ),

                  /// ページネーション
                  loadMoreData: () async {
                    final first = chatList.$1.first.id;

                    final messages = await ref
                        .read(chatMessageUserListProvider(widget.chatRoomId).notifier)
                        .getMessages(id: first);

                    // await Future.delayed(const Duration(seconds: 1));
                    // await ref
                    //     .read(chatMessageUserListProvider(widget.chatRoomId).notifier)
                    //     .addMessages();

                    chatController.loadMoreData(messages);
                    // await Future.delayed(const Duration(seconds: 1));
                    // setState(() {
                    //   chatController.initialMessageList = chatList.$1.take(50).toList();
                    // });

                    print('chatController:${chatController.initialMessageList.length}');
                    // print('chatList:${chatList.$1.length}');
                    print('chatList:${chatList.$1.length}');
                  },

                  /// チャットの状態
                  chatViewState: ChatViewState.hasMessages,
                  // appBar: AppBar(
                  //   title: Text(widget.label),
                  // ),

                  /// TODO chat全体背景
                  chatBackgroundConfig: const ChatBackgroundConfiguration(
                    // messageTimeIconColor: theme.messageTimeIconColor,
                    // messageTimeTextStyle: TextStyle(color: theme.messageTimeTextColor),
                    // defaultGroupSeparatorConfig: DefaultGroupSeparatorConfiguration(
                    //   textStyle: TextStyle(
                    //     color: theme.chatHeaderColor,
                    //     fontSize: 17,
                    //   ),
                    // ),
                    backgroundColor: ThemeColor.weak, // 背景色(chat全体背景)
                  ),

                  /// (送信フォーム)
                  sendMessageConfig: SendMessageConfiguration(
                    allowRecordingVoice: false, // ボイスなし
                    imagePickerIconsConfig: const ImagePickerIconsConfiguration(
                      cameraImagePickerIcon: SizedBox(), // カメラなし
                    ),
                    replyMessageColor: Colors.black, // リプライメッセージの色(送信フォーム)
                    defaultSendButtonColor: ThemeColor.main, // 送信ボタン(送信フォーム)
                    replyDialogColor: ThemeColor.littleWeak, // リプライ背景色(送信フォーム)
                    replyTitleColor: ThemeColor.strong, // リプライタイトル(送信フォーム)

                    // textFieldBackgroundColor: Colors.grey.shade100, // 背景色
                    closeIconColor: theme.closeIconColor,
                    textFieldConfig: TextFieldConfiguration(
                      maxLines: 100, // 入力文字の行
                      contentPadding: const EdgeInsets.all(10),
                      hintText: '文字入れてね', // TODO ヒント
                      compositionThresholdTime: const Duration(seconds: 5),
                      textStyle: TextStyle(
                        color: theme.textFieldTextColor,
                      ),
                    ),
                  ),
                  // TODO わからん
                  chatBubbleConfig: ChatBubbleConfiguration(
                    onDoubleTap: (message) {
                      setState(() {
                        showReaction = !showReaction;
                      });
                    },
                    // TODO わからん
                    outgoingChatBubbleConfig: const ChatBubble(
                      receiptsWidgetConfig: ReceiptsWidgetConfig(
                        showReceiptsIn: ShowReceiptsIn.all, // チャット横幅
                      ),
                    ),
                  ),

                  messageConfig: MessageConfiguration(
                    customMessageBuilder: (p0) {
                      return ChatCard(
                        currentUser: currentChatUser,
                        showReaction: showReaction,
                        chatController: chatController,
                        message: p0,
                      );
                    },
                  ),
                  profileCircleConfig: const ProfileCircleConfiguration(
                    profileImageUrl: Data.profileImage,
                  ),

                  repliedMessageConfig: const RepliedMessageConfiguration(
                    backgroundColor: ThemeColor.strong,
                    verticalBarColor: ThemeColor.strong,
                    repliedMsgAutoScrollConfig: RepliedMsgAutoScrollConfig(
                      enableHighlightRepliedMsg: true,
                      highlightColor: ThemeColor.weak,
                      highlightScale: 1.1,
                    ),
                    textStyle: TextStyle(
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                      letterSpacing: 0.25,
                    ),
                    replyTitleTextStyle: TextStyle(color: ThemeColor.strong),
                  ),

                  /// TODO スワイプ
                  swipeToReplyConfig: SwipeToReplyConfiguration(
                    replyIconColor: theme.swipeToReplyIconColor,
                  ),
                );
              },
            );
          },
        ));
  }

  Future<void> onSendTap(String message, ReplyMessage replyMessage, MessageType messageType) async {
    if (userId == null) return;
    final msg = Message(
      // id: ID.unique(),
      createdAt: DateTime.now(),
      message: message,
      sendBy: userId!,
      replyMessage: replyMessage,
      messageType: MessageType.text == messageType ? MessageType.custom : messageType, //TODO カスタム
      chatRoomId: widget.chatRoomId,
    );
    await ref.read(messageAPIProvider).createMessageDocument(msg);

    if (chatController.initialMessageList.length > 100) {
      print('AAA');
      chatController.initialMessageList =
          await ref.read(chatMessageUserListProvider(widget.chatRoomId).notifier).getMessages();
    }
  }
}
